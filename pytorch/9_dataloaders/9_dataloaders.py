# -*- coding: utf-8 -*-
# refer to https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
"""
pytorch.ipynb

Automatically generated by Colaboratory.

"""
import pandas as pd
import numpy as np

# PART 1: read CSV and reshape annotations into 68x2 Array
# ==================================
landmarks_frame = pd.read_csv("/content/faces/face_landmarks.csv")
# print(landmarks_frame)
#                            image_name  part_0_x  ...  part_67_x  part_67_y
# 0                 0805personali01.jpg        27  ...         84        134
# ..                                ...       ...  ...        ...        ...
# 64                    matt-mathes.jpg        85  ...        141        235
# ..                                ...       ...  ...        ...        ...

n = 65
img_name = landmarks_frame.iloc[n,0]
landmarks = landmarks_frame.iloc[n, 1:]
landmarks = np.asarray(landmarks)
landmarks = landmarks.astype("float").reshape(-1,2)

print('Image name: {}'.format(img_name))              # person-7.jpg
print('Landmarks shape: {}'.format(landmarks.shape))  # (68, 2)
print('First 4 Landmarks: {}'.format(landmarks[:4]))  # [[32. 65.], [33. 76.], [34. 86.], [34. 97.]]
print('x position of First 4 Landmarks: {}'.format(landmarks[:4, 0]))  # [32. 33. 34. 34.]


# PART 2: define a helper function to show an image with landmarks
# ==================================
import matplotlib.pyplot as plt
from skimage import io, transform
import os

def show_landmarks(image, landmarks):
    """Show image with landmarks"""
    plt.imshow(image)
    plt.scatter(landmarks[:, 0], landmarks[:, 1], s=10, marker='.', c='r') # s: marker size, c: color, 
    plt.pause(0.001)  # pause a bit so that plots are updated

plt.figure()
show_landmarks(io.imread(os.path.join("/content/faces/", img_name)),
               landmarks)

# PART 3: 
# ==================================
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, utils

# create a custom dataset which inherit Dataset and override below methods:
# __len__: return the size of the dataset
# __getitem__: to support indexing (to get ith sample)

# read the csv in __init__ but leave the reading of images to __getitem__. 
# This is memory efficient

class FaceLandMarksDataset(Dataset):
  def __init__(self, csv_file, root_dir, transform=None):
    self.landmarks_frame = pd.read_csv(csv_file)
    self.root_dir = root_dir
    self.transform = transform

  def __len__(self):
    return len(self.landmarks_frame)
  
  def __getitem__(self, idx):
    pass