# -*- coding: utf-8 -*-

"""
pytorch.ipynb

Automatically generated by Colaboratory.

"""

# refer to https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html#defining-the-dataset

# PART 1: define a custom dataset for PennFudan
# ==================================
import os
import numpy as np
import torch
from PIL import Image

class PennFudanDataset(object):
  def __init__(self, root, transforms):
    self.root = root
    self.transforms = transforms

    # listdir() returns a list containing the names of the entries in the directory given by path.
    # load all image files, sorting them to ensure that they are aligned
    self.imgs = list(sorted(os.listdir(os.path.join(root, "PNGImages"))))
    self.masks = list(sorted(os.listdir(os.path.join(root, "PedMasks"))))
  
  def __getitem__(self, idx):
    img_path = os.path.join(self.root, "PNGImages", self.imgs[idx])
    mask_path = os.path.join(self.root, "PedMasks", self.masks[idx])
    img = Image.open(img_path).convert("RGB")
    
    mask = Image.open(mask_path)
    mask = np.array(mask)            # H x W

    obj_ids = np.unique(mask)   # returns the sorted unique elements of an array
                                # obj_ids = [0 1 2], 
                                # if 3x instances in img 
    obj_ids = obj_ids[1:]       # first id is the background, remove it. obj_ids.shape = (2,)
    masks = (mask == obj_ids[:,None, None])  # spilt the color-encoded mask into a set 
                                             # ob binary masks
                                             # 2 x H x W
    num_objs = len(obj_ids)
    boxes = []
    for i in range(num_objs):
      pos = np.where(masks[i])
      xmin = np.min(pos[1])
      xmax = np.max(pos[1])
      ymin = np.min(pos[0])
      ymax = np.max(pos[0])
      boxes.append([xmin, ymin, xmax, ymax])

    # convert everything into a torch.Tensor
    boxes = torch.as_tensor(boxes, dtype=torch.float32)
    
    # To do...

    # return img, target

  def __len__(self):
    return len(self.imgs)

dataset = PennFudanDataset('PennFudanPed', None)
print(dataset[0])

